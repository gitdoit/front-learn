{
    "compilerOptions": {
        // TS编译器在第一次编译之后会生成一个存储编译信息的文件
        // 第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
        "incremental": false, 
        // 增量编译文件的存储位置
       //  "tsBuildInfoFile": "./buildFile", 
        // 打印诊断信息
        "diagnostics": true,  
         // 目标语言的版本
         // https://juejin.cn/post/7109378925964296223 各个版本
        "target": "ES2022",
         // 生成代码的模板标准
        "module": "ESNext",
       // "outFile": "./app.js", // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD",
       // "outFile": "./app.js", // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD",

       // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如
       // 需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array",
       // https://www.claritician.com/typescript-lib-vs-target-what-s-the-difference#:~:text=From%20the%20docs%2C%20lib%20specifies,and%20includes%20compatible%20library%20declarations.
        "lib": ["DOM", "ES2022", "ScriptHost", "ES2019.Array"], 
        //"allowJS": true, // 允许编译器编译JS，JSX文件
        // 允许在JS文件中报错，通常与allowJS一起使用
        "checkJs": true, 
         // 指定输出目录
        "outDir": "./dist",
        // 指定输出文件目录(用于输出)，用于控制输出目录结构
        "rootDir": "./", 
        // 生成声明文件，开启后会自动生成声明文件
        "declaration": true, 

        // 指定生成声明文件存放目录
        //"declarationDir": "./file", 

        // 只生成声明文件，而不会生成js文件
        //"emitDeclarationOnly": true, 
       // "sourceMap": true, // 生成目标文件的sourceMap文件
        //"inlineSourceMap": true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中
        // 为声明文件生成sourceMap
        "declarationMap": true, 
        // 声明文件目录，默认时node_modules/@types
        "typeRoots": [], 
        // 加载的声明文件包
        "types": [], 
         // 删除注释 
        "removeComments":true,

        // 不输出文件,即编译后不会生成任何js文件
        // "noEmit": true, 

        // 发送错误时不输出任何文件
        "noEmitOnError": true,
        // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
        "noEmitHelpers": true, 
         // 通过tslib引入helper函数，文件必须是模块
        "importHelpers": true,
        // 
        // "isolatedModules": true,
         // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
        "downlevelIteration": true,
        // 开启所有严格的类型检查
        "strict": false, 
         // 在代码中注入'use strict'
        "alwaysStrict": false,
        // 不允许隐式的any类型
        "noImplicitAny": true, 
         // 不允许把null、undefined赋值给其他类型的变量
        "strictNullChecks": true,
        // 不允许函数参数双向协变
        "strictFunctionTypes": true, 
         // 类的实例属性必须初始化
        "strictPropertyInitialization": true,
        // 严格的bind/call/apply检查
        "strictBindCallApply": true, 
        // 不允许this有隐式的any类型
        "noImplicitThis": true, 
        // 检查只声明、未使用的局部变量(只提示不报错)
        "noUnusedLocals": false, 
        // 检查未使用的函数参数(只提示不报错)
        "noUnusedParameters": false, 
        // 防止switch语句贯穿(即如果没有break语句后面不会执行)
        "noFallthroughCasesInSwitch": true, 
        // 每个分支都会有返回值
        "noImplicitReturns": true, 
        //  允许export=导出，由import from 导入
        "esModuleInterop": true,
         // 允许在模块中全局变量的方式访问umd模块
        "allowUmdGlobalAccess": true,
        // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
        "moduleResolution": "node", 
        // 解析非相对模块的基地址，默认是当前目录
        "baseUrl": "./", 
         // 路径映射，相对于baseUrl
        "paths": {
          // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置
          "jquery": ["node_modules/jquery/dist/jquery.min.js"]
        },
        // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
        "rootDirs": ["src","out"], 
         // 打印输出文件
        "listEmittedFiles": true,
        // 打印编译的文件(包括引用的声明文件)
        "listFiles": true
      },
       
      // 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）
      "include": [
         "src/**/*"
      ],
      // 指定一个排除列表（include的反向操作）
       "exclude": [
      ],
      // 指定哪些文件使用该配置（属于手动一个个指定文件）
       //"files": [ "./src/type-challenges/**/*" ]
}